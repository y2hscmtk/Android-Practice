/* <Room>
* Room의 주요 3요소
*
* - @Entity : 클래스를 테이블 스키마로 지정하는 annotation
* : 테이블 스키마 정의
* CREATE TABLE student_table(
*    studnet_id INTEGER PRIMARY KEY,
*    name TEXT NOT NULL
* );
* : Entity 생성
* @Entity(tableName = "student_table") //실제 테이블 이름 지정
* data class Studet (
*     @PrimaryKey @ColumnInfo(name = "student_id")
*     val id: Int
*     val name: String
* ) //@Primary key로 프라이머리 키 지정, @ColumnInfo로 실제 테이블 스키마에서 사용할 이름 지정
*
* : 외래 키 지정
* @Entity(tableName = "enrollment",
*     primaryKeys = ["sid","cid"],
*     foreignKeys = [
*         ForeignKey(entity = Student::class, parentColums = ["student_id"], childColumns =["sid"]),
*         ForeingKey(entity = ClassInfo::class, parentColums = ["id"], childColumns = ["cid"])
*     ]
* ) // Student Table(primary = student_id) - Enrollment Table(primary = ["sid","cid"] - ClassInfo(primary = id)
* //Student Table과 ClassInfo Table의 Primary Key를 ForeignKey로 가져와 복합 키를 구성하여 사용
*
* - @Dao : insert,delete,update 자동으로 만들어줌, 추가 선언도 가능 @Query => Select연산에 해당
* : @Query로 리턴되는 데이터의 타입을 LiveData<>로 하면, 데이터가 업데이트 될 때, Observer를 통해 할 수 있음 => LiveData는 비동기적이므로 corutine할 필요 없음
* : LiveData<>로 선언하지 않는다면 => suspend를 통해 중단 가능 함수로 선언할 것 => corutine을 사용하여 호출해야함(동기)
* : 비동기적(Race Condition) - 동기적(CPU 독점)
*
* - @Database : RoomDatabase를 상속하여 자신의 Room 클래스를 만들어야함
* : 데이터베이스 내에 포함되는 Entity들과 데이터베이스 버전(version)을 @Database annotation에 지정
* : version이 기존에 저장되있는 데이터베이스 보다 높다면 open할때, migration을 수행함
* : DAO를 가져올 수 있는 getter 메소드를 만듬 => 실제 메소드 정의는 Room Compiler에 의해 자동으로 생성됨(추가 작성 필요x)
* : Room 클래스 인스턴스는 하나만 있으면 되므로, Singleton Pattern을 사용함
* : Room 클래스의 객체 생성은 Room.databaseBuilder()를 이용함
*
* @Database(entities = [Student:class, ClassInfo::class, Enrollment::class],version = 1) //사용할 엔티티들과 버전 선언
* abstract class MyDatabase : RoomDatabase(){ //추상 클래스로 작성 => DAO를 가져올 수 있는 추상 메소드를 작성하기 위함 => 구현은 Room 컴파일러가 수행
*     abstract fun getMyDao() : MyDAO //DAO를 가져오기 위한 추상 클래스에 해당, 구현은 컴파일러가 해준다.
*
*     companion object { // static에 해당
*         private var INSTANCE: MyDatabase? = null //Singleton Pattern Instance
*         //testing methods for database migration
*         private val MIGRATION_1_2 = object : Migration(1,2) {
*             override fun migration(database: SUppportSQLiteDatabase) { 생략 }
*         }
*
*         private val MIGRATION_2_3 = object : Migration(1,2) {
*             override fun migration(database: SUppportSQLiteDatabase) { 생략 }
*         }
*
*         fun getDatabase(context:Context) : MyDatabase { //database 인스턴스를 생성하는데 context가 필요하므로, 매개변수로 context를 받는다.
*             if(INSTANCE == null) {
*                  //Builder패턴을 이용하여 인스턴스 생성 => 필수 매개변수 : context, 생성에 사용할 클래스, 데이터베이스 이름
*                  INSTANCE = Room.databaseBuilder(
*                      context, MyDatabase::class.java, "school_database")
*                      .addMiragtions(MIGRATION_1_2, MIGRATION_2_3) //addMirgrations를 호출하여 Migration방법을 지정
*                      .build()
*             }
*             return INSTANCE as MyDatabase
*         }
*     }
* }
* : 스키마(Entity로 정의된)를 변경하면 데이터베이스 버전을 올리고 Migration을 수행해야함
*
* - UI 연결
* : RoomDatabase 객체로부터 DAO객체를 받아오고, DAO객체의 메소드를 호출하여 데이터베이스 접근
* myDao = MyDatabase.getDatabase(this).getMyDao() //컴파일러에 의해 구현된 getMyDao() method
* runBlocking {
*     myDao.insertStudent(Student(1,"james"))
* }
* val allStudents = myDao.getAllStudents() //LiveData는 Observer를 통해 비동기적으로 데이터를 가져옴 => Race Condition
* allStudents.observe(this){
*    ...
* }
*
* - 1:N 관계 처리
* :                *
* : Student -------- Enrollment //Student 1개당 여러개의 Enrollment가 관계
* :         1
*
* : Student에 Query연산을 수행할 때, 관계된 Enrollment 에도 Query 연산을 수행 해야함
* : @Embedded => 다른 클래스의 속성을 포함시키고 싶을 때 사용
* : @Relation => 1:N에서 연관되는 column을 지정
*
* data class StudentWithEnrollment( // 1: N 관계
*     @Embedded
*     val student : Student,
*     @Relation(parentColumn = "studnet_id", entityColumn = "sid")
*     val enrollments: List<Enrollment>
* )
*
* */